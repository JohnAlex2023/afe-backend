# app/api/v1/routers/automation.py
"""
Router para las APIs del sistema de automatizaci√≥n de facturas.

Proporciona endpoints para:
- Ejecutar procesamiento manual de automatizaci√≥n
- Consultar estado de facturas procesadas autom√°ticamente  
- Configurar par√°metros de automatizaci√≥n
- Obtener estad√≠sticas del sistema
"""

from typing import List, Dict, Any, Optional
from datetime import datetime, timedelta
from fastapi import APIRouter, Depends, HTTPException, Query, BackgroundTasks
from sqlalchemy.orm import Session

from app.db.session import get_db
from app.services.automation.automation_service import AutomationService
from app.services.automation.notification_service import NotificationService, ConfiguracionNotificacion
from app.services.audit_service import AuditService
from app.crud import factura as crud_factura
from app.models.factura import Factura, EstadoFactura
from app.schemas.common import ResponseBase
from pydantic import BaseModel, Field


router = APIRouter(tags=["Automatizaci√≥n"])


# ==================== ENDPOINT DE INICIALIZACI√ìN ENTERPRISE ====================

@router.post("/inicializar-sistema", summary="üöÄ Inicializaci√≥n Enterprise del Sistema Completo")
def inicializar_sistema_completo(
    archivo_presupuesto: Optional[str] = None,
    a√±o_fiscal: int = 2025,
    responsable_default_id: int = 1,
    ejecutar_vinculacion: bool = True,
    ejecutar_workflow: bool = True,
    dry_run: bool = False,
    db: Session = Depends(get_db)
):
    """
    **INICIALIZACI√ìN COMPLETA DEL SISTEMA ENTERPRISE**

    Ejecuta la inicializaci√≥n orquestada de todo el sistema:

    1. ‚úÖ **Verificaci√≥n de Estado**: Analiza el estado actual
    2. ‚úÖ **Validaci√≥n de Pre-requisitos**: Valida datos y configuraciones
    3. ‚úÖ **Importaci√≥n de Presupuesto**: Importa desde Excel (si se proporciona)
    4. ‚úÖ **Auto-configuraci√≥n NIT-Responsable**: Crea asignaciones autom√°ticamente
    5. ‚úÖ **Vinculaci√≥n de Facturas**: Vincula facturas existentes con presupuesto
    6. ‚úÖ **Activaci√≥n de Workflow**: Activa workflow de aprobaci√≥n
    7. ‚úÖ **Reporte Ejecutivo**: Genera reporte completo

    **Caracter√≠sticas Enterprise:**
    - Transacciones at√≥micas (todo o nada)
    - Rollback autom√°tico en errores
    - Idempotente (se puede ejecutar m√∫ltiples veces)
    - Logging detallado
    - Dry-run para simulaci√≥n

    **Par√°metros:**
    - `archivo_presupuesto`: Ruta al Excel de presupuesto (opcional)
    - `a√±o_fiscal`: A√±o a procesar (default: 2025)
    - `responsable_default_id`: ID del responsable por defecto
    - `ejecutar_vinculacion`: Si debe vincular facturas (default: true)
    - `ejecutar_workflow`: Si debe activar workflow (default: true)
    - `dry_run`: Si true, solo simula sin hacer cambios (default: false)

    **Ejemplo de uso:**
    ```bash
    # Simular (dry-run)
    POST /api/v1/automation/inicializar-sistema?dry_run=true

    # Ejecutar completo
    POST /api/v1/automation/inicializar-sistema?archivo_presupuesto=presupuesto.xlsx
    ```
    """
    from app.services.inicializacion_sistema import InicializacionSistemaService

    servicio = InicializacionSistemaService(db)

    resultado = servicio.inicializar_sistema_completo(
        archivo_presupuesto=archivo_presupuesto,
        a√±o_fiscal=a√±o_fiscal,
        responsable_default_id=responsable_default_id,
        ejecutar_vinculacion=ejecutar_vinculacion,
        ejecutar_workflow=ejecutar_workflow,
        dry_run=dry_run
    )

    if not resultado.get("exito"):
        raise HTTPException(
            status_code=500,
            detail={
                "mensaje": "Error en la inicializaci√≥n del sistema",
                "errores": resultado.get("errores", [])
            }
        )

    return resultado


# Esquemas de respuesta
class EstadisticasAutomatizacion(BaseModel):
    """Esquema para estad√≠sticas de automatizaci√≥n."""
    facturas_procesadas_hoy: int
    facturas_aprobadas_automaticamente: int
    facturas_en_revision: int
    tasa_automatizacion: float
    tiempo_promedio_procesamiento: Optional[float]
    ultimo_procesamiento: Optional[datetime]


class ConfiguracionAutomatizacion(BaseModel):
    """Esquema para configuraci√≥n de automatizaci√≥n."""
    confianza_minima_aprobacion: float = Field(ge=0.0, le=1.0, default=0.85)
    dias_historico_patron: int = Field(ge=7, le=365, default=90)
    variacion_monto_permitida: float = Field(ge=0.0, le=1.0, default=0.10)
    requiere_orden_compra: bool = False
    notificaciones_activas: bool = True
    procesamiento_automatico_activo: bool = True


class SolicitudProcesamiento(BaseModel):
    """Esquema para solicitud de procesamiento manual."""
    limite_facturas: int = Field(ge=1, le=100, default=20)
    modo_debug: bool = False
    solo_proveedor_id: Optional[int] = None
    forzar_reprocesamiento: bool = False


class ResultadoFacturaAutomatizada(BaseModel):
    """Esquema para resultado de factura procesada."""
    factura_id: int
    numero_factura: str
    decision: str
    confianza: float
    motivo: str
    fecha_procesamiento: datetime
    requiere_accion_manual: bool


# Instancias de servicios (se crean al cargar el m√≥dulo)
automation_service = AutomationService()
notification_service = NotificationService()


@router.post("/procesar", response_model=Dict[str, Any])
async def procesar_facturas_pendientes(
    solicitud: SolicitudProcesamiento,
    background_tasks: BackgroundTasks,
    db: Session = Depends(get_db)
):
    """
    Ejecuta el procesamiento autom√°tico de facturas pendientes.
    
    Esta operaci√≥n puede tomar varios minutos dependiendo de la cantidad
    de facturas pendientes.
    """
    try:
        # Validar que hay facturas pendientes
        facturas_pendientes = crud_factura.get_facturas_pendientes_procesamiento(
            db, limit=solicitud.limite_facturas
        )
        
        if not facturas_pendientes:
            return ResponseBase(
                success=True,
                message="No hay facturas pendientes de procesamiento autom√°tico",
                data={"facturas_procesadas": 0}
            )
        
        # Filtrar por proveedor si se especifica
        if solicitud.solo_proveedor_id:
            facturas_pendientes = [
                f for f in facturas_pendientes 
                if f.proveedor_id == solicitud.solo_proveedor_id
            ]
        
        # Ejecutar procesamiento
        resultado = automation_service.procesar_facturas_pendientes(
            db=db,
            limite_facturas=len(facturas_pendientes),
            modo_debug=solicitud.modo_debug
        )
        
        # Programar env√≠o de notificaciones en segundo plano
        if resultado['resumen_general']['facturas_procesadas'] > 0:
            background_tasks.add_task(
                enviar_notificaciones_procesamiento,
                db,
                resultado
            )
        
        return ResponseBase(
            success=True,
            message=f"Procesadas {resultado['resumen_general']['facturas_procesadas']} facturas",
            data=resultado
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error en el procesamiento autom√°tico: {str(e)}"
        )


@router.get("/estadisticas", response_model=EstadisticasAutomatizacion)
async def obtener_estadisticas_automatizacion(
    dias_atras: int = Query(default=7, ge=1, le=90),
    db: Session = Depends(get_db)
):
    """
    Obtiene estad√≠sticas del sistema de automatizaci√≥n.
    """
    try:
        fecha_inicio = datetime.utcnow() - timedelta(days=dias_atras)
        
        # Consultar facturas procesadas autom√°ticamente
        facturas_automatizadas = crud_factura.get_facturas_procesadas_automaticamente(
            db, fecha_desde=fecha_inicio
        )
        
        # Calcular estad√≠sticas
        total_procesadas = len(facturas_automatizadas)
        aprobadas_auto = len([
            f for f in facturas_automatizadas 
            if f.estado == EstadoFactura.aprobada_auto
        ])
        en_revision = len([
            f for f in facturas_automatizadas 
            if f.estado == EstadoFactura.en_revision
        ])
        
        tasa_automatizacion = (aprobadas_auto / max(total_procesadas, 1)) * 100
        
        # Obtener √∫ltimo procesamiento
        ultimo_procesamiento = None
        if facturas_automatizadas:
            ultima_factura = max(
                facturas_automatizadas, 
                key=lambda x: x.fecha_procesamiento_auto or datetime.min
            )
            ultimo_procesamiento = ultima_factura.fecha_procesamiento_auto
        
        return EstadisticasAutomatizacion(
            facturas_procesadas_hoy=total_procesadas,
            facturas_aprobadas_automaticamente=aprobadas_auto,
            facturas_en_revision=en_revision,
            tasa_automatizacion=tasa_automatizacion,
            tiempo_promedio_procesamiento=None,  # Por implementar
            ultimo_procesamiento=ultimo_procesamiento
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo estad√≠sticas: {str(e)}"
        )


@router.get("/facturas-procesadas", response_model=List[ResultadoFacturaAutomatizada])
async def obtener_facturas_procesadas(
    dias_atras: int = Query(default=7, ge=1, le=90),
    estado: Optional[str] = Query(default=None),
    proveedor_id: Optional[int] = Query(default=None),
    limit: int = Query(default=50, ge=1, le=200),
    db: Session = Depends(get_db)
):
    """
    Obtiene la lista de facturas procesadas autom√°ticamente.
    """
    try:
        fecha_inicio = datetime.utcnow() - timedelta(days=dias_atras)
        
        # Obtener facturas procesadas
        facturas = crud_factura.get_facturas_procesadas_automaticamente(
            db, 
            fecha_desde=fecha_inicio,
            estado=estado,
            proveedor_id=proveedor_id,
            limit=limit
        )
        
        # Convertir a esquema de respuesta
        resultados = []
        for factura in facturas:
            resultado = ResultadoFacturaAutomatizada(
                factura_id=factura.id,
                numero_factura=factura.numero_factura,
                decision=factura.estado.value if factura.estado else "desconocido",
                confianza=float(factura.confianza_automatica or 0),
                motivo=factura.motivo_decision or "",
                fecha_procesamiento=factura.fecha_procesamiento_auto or datetime.utcnow(),
                requiere_accion_manual=(factura.estado != EstadoFactura.aprobada_auto)
            )
            resultados.append(resultado)
        
        return resultados
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo facturas procesadas: {str(e)}"
        )


@router.get("/configuracion", response_model=Dict[str, Any])
async def obtener_configuracion():
    """
    Obtiene la configuraci√≥n actual del sistema de automatizaci√≥n.
    """
    try:
        config = automation_service.obtener_configuracion_actual()
        return ResponseBase(
            success=True,
            message="Configuraci√≥n obtenida exitosamente",
            data=config
        )
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error obteniendo configuraci√≥n: {str(e)}"
        )


@router.put("/configuracion")
async def actualizar_configuracion(
    nueva_config: ConfiguracionAutomatizacion,
    db: Session = Depends(get_db)
):
    """
    Actualiza la configuraci√≥n del sistema de automatizaci√≥n.
    """
    try:
        # Convertir a formato interno
        config_interna = {
            'decision_engine': {
                'confianza_minima_aprobacion': nueva_config.confianza_minima_aprobacion,
                'requiere_orden_compra': nueva_config.requiere_orden_compra
            },
            'pattern_detector': {
                'dias_historico': nueva_config.dias_historico_patron,
                'tolerancia_variacion_monto': nueva_config.variacion_monto_permitida
            }
        }
        
        # Aplicar configuraci√≥n
        automation_service.actualizar_configuracion(config_interna)
        
        # Registrar cambio en auditor√≠a
        from app.crud import audit as crud_audit
        crud_audit.create_audit(
            db=db,
            entidad="configuracion_automatizacion",
            entidad_id=0,
            accion="actualizacion",
            usuario="sistema",
            detalle=nueva_config.dict()
        )
        
        return ResponseBase(
            success=True,
            message="Configuraci√≥n actualizada exitosamente",
            data=nueva_config.dict()
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error actualizando configuraci√≥n: {str(e)}"
        )


@router.post("/reprocesar/{factura_id}")
async def reprocesar_factura(
    factura_id: int,
    modo_debug: bool = Query(default=False),
    db: Session = Depends(get_db)
):
    """
    Reprocesa una factura espec√≠fica con el sistema de automatizaci√≥n.
    """
    try:
        # Obtener la factura
        factura = crud_factura.get_factura(db, factura_id)
        if not factura:
            raise HTTPException(status_code=404, detail="Factura no encontrada")
        
        # Resetear campos de procesamiento autom√°tico
        campos_reset = {
            'patron_recurrencia': None,
            'confianza_automatica': None,
            'factura_referencia_id': None,
            'motivo_decision': None,
            'procesamiento_info': None,
            'fecha_procesamiento_auto': None,
            'aprobada_automaticamente': False
        }
        crud_factura.update_factura(db, factura, campos_reset)
        
        # Reprocesar
        resultado = automation_service.procesar_factura_individual(
            db, factura, modo_debug
        )
        
        return ResponseBase(
            success=True,
            message=f"Factura {factura.numero_factura} reprocesada exitosamente",
            data=resultado
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error reprocesando factura: {str(e)}"
        )


@router.get("/patrones/{proveedor_id}")
async def analizar_patrones_proveedor(
    proveedor_id: int,
    dias_atras: int = Query(default=90, ge=30, le=365),
    db: Session = Depends(get_db)
):
    """
    Analiza los patrones de facturaci√≥n de un proveedor espec√≠fico.
    """
    try:
        # Obtener facturas del proveedor
        fecha_inicio = datetime.utcnow() - timedelta(days=dias_atras)
        facturas = crud_factura.get_facturas_by_proveedor_fecha(
            db, proveedor_id, fecha_inicio
        )
        
        if not facturas:
            return ResponseBase(
                success=True,
                message="No se encontraron facturas para an√°lisis",
                data={"patrones": [], "total_facturas": 0}
            )
        
        # Agrupar por concepto normalizado y analizar patrones
        patrones_detectados = {}
        
        for factura in facturas:
            concepto = factura.concepto_normalizado or "sin_concepto"
            if concepto not in patrones_detectados:
                patrones_detectados[concepto] = []
            patrones_detectados[concepto].append(factura)
        
        # Analizar cada grupo de facturas
        analisis_patrones = []
        pattern_detector = automation_service.pattern_detector
        
        for concepto, grupo_facturas in patrones_detectados.items():
            if len(grupo_facturas) >= 2:  # M√≠nimo 2 facturas para detectar patr√≥n
                # Tomar la √∫ltima factura como referencia
                factura_referencia = max(grupo_facturas, key=lambda x: x.fecha_emision)
                facturas_historicas = [f for f in grupo_facturas if f.id != factura_referencia.id]
                
                resultado_patron = pattern_detector.analizar_patron_recurrencia(
                    factura_referencia, facturas_historicas
                )
                
                analisis_patrones.append({
                    'concepto': concepto,
                    'total_facturas': len(grupo_facturas),
                    'es_recurrente': resultado_patron.es_recurrente,
                    'patron_temporal': resultado_patron.patron_temporal.tipo,
                    'confianza_patron': float(resultado_patron.confianza_global),
                    'promedio_dias': resultado_patron.patron_temporal.promedio_dias,
                    'monto_estable': resultado_patron.patron_monto.estable,
                    'variacion_monto_pct': float(resultado_patron.patron_monto.variacion_porcentaje)
                })
        
        return ResponseBase(
            success=True,
            message=f"An√°lisis completado para {len(facturas)} facturas",
            data={
                "patrones": analisis_patrones,
                "total_facturas": len(facturas),
                "conceptos_analizados": len(patrones_detectados)
            }
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error analizando patrones del proveedor: {str(e)}"
        )


@router.post("/notificar-resumen")
async def enviar_notificacion_resumen_manual(
    dias_atras: int = Query(default=1, ge=1, le=7),
    responsables_ids: Optional[List[int]] = None,
    db: Session = Depends(get_db)
):
    """
    Env√≠a manualmente un resumen de procesamiento a los responsables.
    """
    try:
        # Obtener estad√≠sticas del per√≠odo
        fecha_inicio = datetime.utcnow() - timedelta(days=dias_atras)
        facturas_procesadas = crud_factura.get_facturas_procesadas_automaticamente(
            db, fecha_desde=fecha_inicio
        )
        
        # Simular estad√≠sticas de procesamiento
        estadisticas = {
            'resumen_general': {
                'facturas_procesadas': len(facturas_procesadas),
                'aprobadas_automaticamente': len([f for f in facturas_procesadas if f.estado == EstadoFactura.aprobada_auto]),
                'enviadas_revision': len([f for f in facturas_procesadas if f.estado == EstadoFactura.en_revision]),
                'tasa_automatizacion': 0
            }
        }
        
        # Calcular tasa
        if estadisticas['resumen_general']['facturas_procesadas'] > 0:
            estadisticas['resumen_general']['tasa_automatizacion'] = (
                estadisticas['resumen_general']['aprobadas_automaticamente'] / 
                estadisticas['resumen_general']['facturas_procesadas'] * 100
            )
        
        # Obtener facturas pendientes
        facturas_pendientes = crud_factura.get_facturas_pendientes_procesamiento(db)
        
        # Enviar notificaci√≥n
        resultado = notification_service.enviar_resumen_procesamiento(
            db=db,
            estadisticas_procesamiento=estadisticas,
            facturas_pendientes=facturas_pendientes,
            responsables_notificar=responsables_ids
        )
        
        return ResponseBase(
            success=resultado['exito'],
            message="Notificaci√≥n de resumen enviada" if resultado['exito'] else "Error enviando notificaci√≥n",
            data=resultado
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Error enviando notificaci√≥n de resumen: {str(e)}"
        )


# Funci√≥n auxiliar para notificaciones en segundo plano
async def enviar_notificaciones_procesamiento(db: Session, resultado_procesamiento: Dict[str, Any]):
    """Env√≠a notificaciones de procesamiento en segundo plano."""
    try:
        # Identificar facturas que requieren notificaci√≥n
        facturas_revision = []
        facturas_aprobadas = []
        
        for factura_info in resultado_procesamiento.get('facturas_procesadas', []):
            if factura_info.get('requiere_accion_manual', False):
                facturas_revision.append(factura_info['factura_id'])
            elif factura_info.get('decision') == 'aprobacion_automatica':
                facturas_aprobadas.append(factura_info['factura_id'])
        
        # Enviar notificaciones para facturas que requieren revisi√≥n
        for factura_id in facturas_revision:
            factura = crud_factura.get_factura(db, factura_id)
            if factura:
                notification_service.notificar_revision_requerida(
                    db=db,
                    factura=factura,
                    motivo=factura.motivo_decision or "Requiere revisi√≥n manual",
                    confianza=float(factura.confianza_automatica or 0),
                    patron_detectado=factura.patron_recurrencia or "no_detectado"
                )
        
        # Enviar resumen general si se procesaron facturas
        if resultado_procesamiento['resumen_general']['facturas_procesadas'] > 0:
            facturas_pendientes = crud_factura.get_facturas_pendientes_procesamiento(db)
            notification_service.enviar_resumen_procesamiento(
                db=db,
                estadisticas_procesamiento=resultado_procesamiento,
                facturas_pendientes=facturas_pendientes
            )
            
    except Exception as e:
        # Registrar error pero no fallar el procesamiento principal
        import logging
        logger = logging.getLogger(__name__)
        logger.error(f"Error enviando notificaciones en segundo plano: {str(e)}")